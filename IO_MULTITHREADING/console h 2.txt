#include <iostream>
#include <mutex>
#include <iomanip>

class Console {

public:
	
	void Write(const std::string&& str) {

		const char* text = str.c_str();

		size_t len = std::strlen(text);

		if (!len) return;

		bool eol = text[len - 1] == '\n';

		std::lock_guard<std::mutex> lock(_mtx);

		if (size_t size = _prompt.size() + _input.size())
		{
			std::cout
				<< std::setfill('\b') << std::setw(size) << ""
				<< std::setfill(' ') << std::setw(size) << ""
				<< std::setfill('\b') << std::setw(size) << "";

		}

		std::cout << text;

		if (!eol) std::cout << std::endl;

		std::cout << _prompt << _input << std::flush;

	}

	std::string Read() {

		{
			std::lock_guard<std::mutex> lock(_mtx);
			_prompt = "> ";
			_input.clear();

			std::cout << _prompt << std::flush;
		}

		enum {
			Enter = '\n',
			BackSpc = 127
		};

		for (;;) {
			switch (int c = getchar())
			{
			case Enter:
			{
				std::lock_guard<std::mutex> lock(_mtx);
				std::string input = _input;
				_prompt.clear();
				_input.clear();
				std::cout << std::endl;
				return input;
			}

			case BackSpc:
			{

				std::lock_guard<std::mutex> lock(_mtx);
				if (_input.empty())
					break;

				_input.pop_back();
				std::cout << "\b \b" << std::flush;
			}
			default:
			{
				if (c < ' ' || c >= '\x7f')
					break;

				std::lock_guard<std::mutex> lock(_mtx);
				_input += c;
				std::cout << (char)c << std::flush;
			}
				break;
			}

		}


	}

public:
	std::mutex _mtx;
	std::string _input;
	std::string _prompt;
};