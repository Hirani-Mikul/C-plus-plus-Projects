#include <Windows.h>
#include <atlstr.h>
#include <tchar.h>
#include <WinUser.h>
#include <iostream>

#define FILESIZE 13
#define PATHSIZE 52

LPCWSTR lpcDir = L"C:\\Users\\HIRANI\\Desktop\\Windows API\\ASAP Console\\IN";
CString strPath = CString("C:\\Users\\HIRANI\\Desktop\\Windows API\\ASAP Console\\IN");

HANDLE hThreadWorker;

void ReadAndPrint(const CString& path);
CHAR* data = NULL;

HANDLE hDirectory = INVALID_HANDLE_VALUE;
OVERLAPPED overlapped;

DWORD MonitorDirectory(LPVOID lpParam);

void initiate();

int _tmain(int argc, TCHAR* argv[])
{

	initiate();

	hThreadWorker = CreateThread(
		NULL,
		0,
		MonitorDirectory,
		NULL,
		0,
		NULL
	);

	if (hThreadWorker == NULL)
		ExitProcess(3);

	WaitForSingleObject(hThreadWorker, INFINITE);

	CloseHandle(hThreadWorker);

	return 0;
}

void initiate()
{
	hDirectory = CreateFile(
		(LPCWSTR)strPath,
		GENERIC_READ,
		FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE,
		NULL,
		OPEN_EXISTING,
		FILE_FLAG_BACKUP_SEMANTICS | FILE_FLAG_OVERLAPPED,
		NULL
	);

	if (hDirectory == INVALID_HANDLE_VALUE)
	{
		std::cout << "CreateFile failed.\n";
		return;
	}

	overlapped = { 0 };

	overlapped.hEvent = CreateEvent(NULL, TRUE, FALSE, NULL);
}


void ReadAndPrint(const CString& path)
{
	HANDLE hFile = CreateFile(path, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);

	if (hFile == INVALID_HANDLE_VALUE)
	{
		std::wcout << "CreateFile failed!\n";
		return;
	}

	DWORD fileSize;
	DWORD dwBytesRead;

	fileSize = GetFileSize(hFile, NULL);

	data = new CHAR[fileSize + 1];

	BOOL bSuccess = ReadFile(hFile, data, fileSize - 1, &dwBytesRead, NULL);

	if (!bSuccess)
	{
		std::wcout << "ReadFile failed!\n";
		CloseHandle(hFile);
		return;
	}
	else
	{
		if (dwBytesRead > 0 && dwBytesRead <= fileSize)
		{
			data[dwBytesRead] = '\0';
		}
		else return;

		// Print the data
		std::wcout << data << "\n";
	}

	delete[] data;

	CloseHandle(hFile);
}

DWORD MonitorDirectory(LPVOID lpParam)
{
	DWORD buffer[sizeof(FILE_NOTIFY_INFORMATION)]; // 1024 WAS SHOWED IN THE EXAMPLE

	DWORD dwBytesReturned;

	std::cout << "Size of path: " << strPath.GetLength() << "\n";


	BOOL success = ReadDirectoryChangesW(
		hDirectory,
		buffer,
		sizeof(buffer),
		FALSE,
		FILE_NOTIFY_CHANGE_FILE_NAME |
		FILE_NOTIFY_CHANGE_DIR_NAME |
		FILE_NOTIFY_CHANGE_ATTRIBUTES |
		FILE_NOTIFY_CHANGE_SIZE |
		FILE_NOTIFY_CHANGE_LAST_WRITE |
		FILE_NOTIFY_CHANGE_LAST_ACCESS |
		FILE_NOTIFY_CHANGE_CREATION |
		FILE_NOTIFY_CHANGE_SECURITY,
		&dwBytesReturned,
		&overlapped,
		NULL
	);

	while (true)
	{

		if (!success)
		{
			std::cout << "Read Directory ChangesW failed.\n";
			break;
		}

		WaitForSingleObject(overlapped.hEvent, INFINITE);

		DWORD bytesTransferrd;

		success = GetOverlappedResult(hDirectory, &overlapped, &bytesTransferrd, FALSE);

		if (!success) break;

		PFILE_NOTIFY_INFORMATION pNotify = (PFILE_NOTIFY_INFORMATION)buffer;

		while (pNotify)
		{
			if (pNotify->Action == FILE_ACTION_ADDED)
			{
				system("cls");
				TCHAR szFileName[MAX_PATH + 1];

				memcpy(szFileName, pNotify->FileName, min(MAX_PATH, pNotify->FileNameLength));
				szFileName[min((pNotify->FileNameLength / sizeof(TCHAR)), MAX_PATH)] = 0;



				CString fullPath = strPath;
				fullPath.Append(L"\\");
				fullPath.Append(szFileName);

				std::wcout << "File path: " << (const wchar_t*)fullPath << "\n";

				ReadAndPrint(fullPath);
			}

			if (pNotify->NextEntryOffset == 0)break;

			pNotify = (PFILE_NOTIFY_INFORMATION)((LPBYTE)pNotify + pNotify->NextEntryOffset);
		}
		ResetEvent(overlapped.hEvent);

		success = ReadDirectoryChangesW(
			hDirectory,
			buffer,
			sizeof(buffer),
			FALSE,
			FILE_NOTIFY_CHANGE_FILE_NAME |
			FILE_NOTIFY_CHANGE_DIR_NAME |
			FILE_NOTIFY_CHANGE_ATTRIBUTES |
			FILE_NOTIFY_CHANGE_SIZE |
			FILE_NOTIFY_CHANGE_LAST_WRITE |
			FILE_NOTIFY_CHANGE_LAST_ACCESS |
			FILE_NOTIFY_CHANGE_CREATION |
			FILE_NOTIFY_CHANGE_SECURITY,
			&dwBytesReturned,
			&overlapped,
			NULL
		);
	}

	return 0;
}







/*
CHAR lpcDir2[PATHSIZE] = "C:\\Users\\HIRANI\\Desktop\\Windows API\\ASAP Console\\IN";

	lpcDir2[PATHSIZE - 1] = 0;

	CHAR file[FILESIZE] = "textDocument";
	file[FILESIZE - 1] = 0;

	int pathSize = strlen(lpcDir2);
	int fileSize = strlen(file);

	CHAR* fullPath = new CHAR[pathSize + fileSize + 2];

	memcpy(fullPath, lpcDir2, pathSize);

	fullPath[pathSize] = '\\';

	memcpy(fullPath + pathSize + 1,  file , fileSize);

	fullPath[pathSize + fileSize + 1] = 0;

	std::wcout << "File: " << file << "\n";
	std::wcout << "Path: " << lpcDir2 << "\n";
	std::wcout << "File size: " << fileSize << "\n";
	std::wcout << "Path size: " << pathSize << "\n";
	std::wcout << "Full path size: " << strlen(fullPath) << "\n\n\n";

	std::wcout << "Full path: " << fullPath << "\n";

	delete[] fullPath;

	return 0;

*/