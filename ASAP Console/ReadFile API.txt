#include <Windows.h>
#include <atlstr.h>
#include <tchar.h>
#include <WinUser.h>

DWORD g_BytesTransferred = 0;

// abc19, 24, 100, 200, 345, 1000
LPCWSTR filePath = _T("C:\\Users\\HIRANI\\Desktop\\Windows API\\ASAP Console\\IN\\abc1000.txt");

int _tmain(int argc, TCHAR *argv[])
{
	HANDLE hFile;
	DWORD dwBytesRead = 0;
	DWORD dwBytesToRead = 0;

	hFile = CreateFile(filePath, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);

	if (hFile == INVALID_HANDLE_VALUE)
	{

		_tprintf(L"Terminal failure: Unable to read from file.\n GetLastError=%08x\n", GetLastError());
		return 0;
	}

	// Read one character less to save room for the terminating NULL character.

	dwBytesToRead = GetFileSize(hFile, NULL) + 1;

	BYTE* cBuffer;

	// Malloc memory for the size of the message.
	if (cBuffer = (BYTE*)malloc(dwBytesToRead))
		printf("Memory of (%d bytes) has been allocated.\n", dwBytesToRead);

	else {
		printf("Malloc operation failed.");
		CloseHandle(hFile);
		return 0;
	}



	if (FALSE == ReadFile(hFile, cBuffer, dwBytesToRead - 1, &dwBytesRead, NULL))
	{
		printf("Terminal failure: Unable to read from file.\n GetLastError=%08x\n", GetLastError());
		CloseHandle(hFile);
		return 0;
	}


	if (dwBytesRead > 0 && dwBytesRead <= dwBytesToRead - 1)
	{
		cBuffer[dwBytesRead] = '\0';

		_tprintf(TEXT("Data read from %s (%d bytes): \n"), filePath, dwBytesRead);
		printf("%s\n", cBuffer);
		_tprintf(TEXT("\n\nTotal bytes of file: %d bytes: \n"), dwBytesToRead);

	}
	else if (dwBytesRead == 0)
	{
		_tprintf(TEXT("No data read from file %s\n"), filePath);
	}
	else
	{
		printf("\n ** Unexpected value for dwBytesRead ** \n");
	}

	free(cBuffer);

	CloseHandle(hFile);

	return 0;
}