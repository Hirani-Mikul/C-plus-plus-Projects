#include <Windows.h>
#include <atlstr.h>
#include <tchar.h>
#include <WinUser.h>
#include <iostream>
#include <unordered_map>
#include <strsafe.h>
#include <sysinfoapi.h>

#include "MyQueue.h"


struct Setting
{
	TCHAR sInput[MAX_PATH];
	TCHAR sOutput[MAX_PATH];
	TCHAR sError[MAX_PATH];
	TCHAR sPrinter[MAX_PATH];
	DWORD sWaiting;
};

Setting settings;

BOOL SaveSettings();
BOOL LoadSettings();
BOOL VerifySettings();
TCHAR* StringifySettings();
TCHAR* StringifySettingsV2();
TCHAR* StringifySettingsV3();
Setting ParseSettings();
TCHAR* ReadSettings();

void Initialize();

void WriteHeader();
size_t get_length(CONST TCHAR* key, CONST TCHAR* value)
{
	size_t length = 0;

	length += _tcslen(key);
	length += _tcslen(value);

	// Plus one for carriage return "\n"
	length++;

	return length;
}

int _tmain(int argc, TCHAR* argv[])
{
	size_t si = 6457567650;
	size_t si2 = 3210;
	TCHAR wLenBuffer[12];

	TCHAR* p = wLenBuffer;

	swprintf(p, 6, L"%zu", si);

	p += 5;

	TCHAR space[] = TEXT(" ");

	*p = space[0];

	p++;
	TCHAR space2[] = TEXT("d");

	*p = space2[0];

	//swprintf(p, 5, L"%zu", si2);

	std::wcout << "Value: " << wLenBuffer << std::endl;

	return 0;

	Initialize();

	/*
	std::wcout << "Input: " << settings.sInput << std::endl;
	std::wcout << "Output: " << settings.sOutput << std::endl;
	std::wcout << "Error: " << settings.sError << std::endl;
	std::wcout << "Printer: " << settings.sPrinter << std::endl;
	std::wcout << "Waiting: " << settings.sWaiting << std::endl;
	*/

	TCHAR* Buffer = StringifySettingsV3();

	std::cout << "---------> Buffer: \n\n\n\n";

	std::wcout << Buffer << std::endl;

	delete[] Buffer;

	return 0;
}

void Initialize()
{
	LPCWSTR Input = TEXT("C:\\Users\\HIRANI\\Desktop\\Project\\ASAP\\IN");     // INPUT PATH
	LPCWSTR Output = TEXT("C:\\Users\\HIRANI\\Desktop\\Project\\ASAP\\OUT");    // OUTPUT PATH
	LPCWSTR Error = TEXT("C:\\Users\\HIRANI\\Desktop\\Project\\ASAP\\ERROR");  // ERROR PATH
	LPCWSTR Printer = TEXT("Microsoft XPS Document Writer");  // PRINTER NAME

	size_t lenInput = _tcslen(Input);
	size_t lenOutput = _tcslen(Output);
	size_t lenError = _tcslen(Error);
	size_t lenPrinter = _tcslen(Printer);

	_tcscpy_s(settings.sInput, lenInput + 1, Input);
	_tcscpy_s(settings.sOutput, lenOutput + 1, Output);
	_tcscpy_s(settings.sError, lenError + 1, Error);
	_tcscpy_s(settings.sPrinter, lenPrinter + 1, Printer);

	settings.sWaiting = 1000;

}


BOOL SaveSettings()
{
	/*
		DEFAULT SETTINGS:

		Input dir:      .\IN
		Output dir:     .\OUT\
		Error dir:      .\Error\
		Waiting time:   2000 milliseconds


		Config file location: .\config.txt
	*/

	HANDLE hFile = CreateFile(
		L".\\config.txt",     // Config file location.
		GENERIC_WRITE,
		NULL,
		NULL,
		CREATE_ALWAYS,
		FILE_ATTRIBUTE_NORMAL,
		NULL
	);

	if (hFile == INVALID_HANDLE_VALUE)
	{

		std::cout << "Error: Unable to open file.\n";
		return FALSE;
	}

	/*
		Need to parse the settings in the correct format.
	*/

	return TRUE;
}
BOOL LoadSettings()
{

	return TRUE;
}


BOOL VerifySettings()
{



	return TRUE;
}

TCHAR* StringifySettingsV3()
{
	
	TCHAR* HeaderBuffer = new TCHAR[67];

	TCHAR defTexts[5][20] = {
		TEXT("input_directory = "),
		TEXT("output_directory = "),
		TEXT("error_directory = "),
		TEXT("printer = "),
		TEXT("waiting_time = ")
	};

	TCHAR* paramSettings[4] =
	{
		settings.sInput,
		settings.sOutput,
		settings.sError,
		settings.sPrinter
	};

	TCHAR* pHeader = HeaderBuffer;

	// Skip the first 6 bytes to store total size of header.
	pHeader += 6;

	for (int i = 0; i < 4; i++)
	{
		size_t len_defText = _tcslen(defTexts[i]);
		size_t len_param = _tcslen(paramSettings[i]);

		// Size of each value or key.

		TCHAR wLenBuffer[6];
		swprintf(wLenBuffer, sizeof(wLenBuffer)/sizeof(wLenBuffer[0]), L"%zu", len_defText);

		pHeader += sizeof(wLenBuffer)/sizeof(wLenBuffer[0]);
		TCHAR space[] = TEXT(" ");
		*pHeader = space[0];

		TCHAR wLenBuffer2[6];
		swprintf(wLenBuffer2, sizeof(wLenBuffer2)/sizeof(wLenBuffer2[0]), L"%zu", len_param);

		pHeader += sizeof(wLenBuffer2)/sizeof(wLenBuffer2[0]);
		*pHeader = space[0];

	}
	TCHAR nextLine[] = TEXT("\n");
	*pHeader = nextLine[0];

	return HeaderBuffer;
}


TCHAR* StringifySettings()
{
	/*
		 Define the maximum size for the config file.

		 Length of input path + output path + error path + printer name + waiting time.
		 Size in bytes of MAX_PATH + MAX_PATH + MAX_PATH + MAX_PATH + DWORD

		 ----------> 260 + 260 + 260 + 260 + 4 = 1044


		Plus the default text.

		input_directory =
		output_directory =
		error_directory =
		printer =
		waiting_time =


		(15 + 3) + (16 + 3) + (15 + 3) + (7 + 3) + (12 + 3) = 80

		Plus 4 for carriage return character.
		Plus 1 for null terminating character.

		TOTAL MAXIMUM SIZE = 1044 + 4 + 1

	*/

	/*
		DEFINE HEADER:

		Stores the length of each key and value.
		The header has it's own length. The start its always the length of the header.


		SIZE OF ENTIRE HEADER.
		The maximum size required to store any each key or value into a buffer is 5 bytes in ANSI. Since, the maximum value needed to store each key or value has a limit of 260 (size of size_t) in 64 bit system.

		For each key and value, the size is as follow:
		header length = 5 bytes.
		default text = 5 * 5. (5 bytes * 5 keys).
		value text = 5 * 5 (5 bytes * 5 values).
		space character = 5 + 5 + 1
		plus 1 null terminating character.
		
		TOTAL SIZE: 
		5 + 25 + 25 + 11 + 1 = 67.

		For example;

		224 18 82 20 76



		Guide:
		Skip the first 6 bytes for total header size plus space character.


	*/

	//TCHAR HeaderBuffer[67];
	TCHAR* HeaderBuffer = new TCHAR[67];
	
	TCHAR defTexts[5][20] = {
		TEXT("input_directory = "),
		TEXT("output_directory = "),
		TEXT("error_directory = "),
		TEXT("printer = "),
		TEXT("waiting_time = ")
	};

	TCHAR* paramSettings[4] =
	{
		settings.sInput,
		settings.sOutput,
		settings.sError,
		settings.sPrinter
	};

	TCHAR* SettingBuffer = new TCHAR[1044 + 4 + 1];
	TCHAR* pBuffer = SettingBuffer;

	size_t uHeaderLength = 0;
	size_t HeaderContent[10];

	for (int i = 0; i < 4; i++)
	{
		size_t len_defText = _tcslen(defTexts[i]);
		size_t len_param = _tcslen(paramSettings[i]);

		HeaderContent[(i * 2)] = len_defText;
		HeaderContent[(i * 2 + 1)] = len_param;



		if (len_param < 10) uHeaderLength += 1;
		else if (len_param < 100) uHeaderLength += 2;
		else if (len_param < 1000) uHeaderLength += 3;
		else uHeaderLength = 0;

		uHeaderLength += 1;

		/*
			i * 2 = 0 2 4 
			i * 2 + 1 = 1 3 5 7

			0 2 4 6
			1 3 5 7
		*/

		_tcscpy_s(pBuffer, len_defText + 1, defTexts[i]);
		pBuffer += len_defText;

		_tcscpy_s(pBuffer, len_param + 1, paramSettings[i]);
		pBuffer += len_param;

		_tcscpy_s(pBuffer, 1 + 1, TEXT("\n"));
		
		pBuffer++;
	}
	_tcscpy_s(pBuffer, _tcslen(defTexts[4]) + 1, defTexts[4]);
	pBuffer += _tcslen(defTexts[4]);
	_tcscpy_s(pBuffer, 4 + 1, L"1000");

	pBuffer = NULL;
	return SettingBuffer;
}


TCHAR* StringifySettingsV2()
{
	/*
		 Define the maximum size for the config file.

		 Length of input path + output path + error path + printer name + waiting time.
		 Size in bytes of MAX_PATH + MAX_PATH + MAX_PATH + MAX_PATH + DWORD

		 ----------> 260 + 260 + 260 + 260 + 4 = 1044


		Plus the default text.

		input_directory = 
		output_directory = 
		error_directory = 
		printer =
		waiting_time =


		(15 + 3) + (16 + 3) + (15 + 3) + (7 + 3) + (12 + 3) = 80

		Plus 4 for carriage return character.
		Plus 1 for null terminating character.

		TOTAL MAXIMUM SIZE = 1044 + 4 + 1

	*/

	TCHAR defTexts[5][20] = {
		TEXT("input_directory = "),
		TEXT("output_directory = "),
		TEXT("error_directory = "),
		TEXT("printer = "),
		TEXT("waiting_time = ")
	};

	TCHAR* paramSettings[4] =
	{
		settings.sInput,
		settings.sOutput,
		settings.sError,
		settings.sPrinter
	};

	int nextBufPos = 0;
	TCHAR* SettingBuffer = new TCHAR[1044 + 4 + 1];

	for (int i = 0; i < 4; i++)
	{
		size_t len_defText = _tcslen(defTexts[i]);
		size_t len_param = _tcslen(paramSettings[i]);

		_tcscpy_s(SettingBuffer + nextBufPos, len_defText + 1, defTexts[i]);
		nextBufPos += len_defText;

		_tcscpy_s(SettingBuffer + nextBufPos, len_param + 1, paramSettings[i]);
		nextBufPos += len_param;

		_tcscpy_s(SettingBuffer + nextBufPos, 1 + 1, TEXT("\n"));
		nextBufPos += 1;
	}

	_tcscpy_s(SettingBuffer + nextBufPos, _tcslen(defTexts[4]) + 1, defTexts[4]);
	nextBufPos += _tcslen(defTexts[4]);
	_tcscpy_s(SettingBuffer + nextBufPos, 4 + 1, L"1000");

	/*
	TCHAR* Buffer = new TCHAR[1044 + 4 + 1];

	TCHAR defInput[] = TEXT("input_directory = ");
	TCHAR defOutput[] = TEXT("output_directory = ");
	TCHAR defError[] = TEXT("error_directory = ");
	TCHAR defPrinter[] = TEXT("printer = ");
	TCHAR defWaiting[] = TEXT("waiting_time = ");

	// Lengths of current paths stored in the settings.
	size_t len_input = _tcslen(settings.sInput);
	size_t len_output = _tcslen(settings.sOutput);
	size_t len_error = _tcslen(settings.sError);
	size_t len_printer = _tcslen(settings.sPrinter);

	size_t len_defInput = _tcslen(defInput);
	size_t len_defOutput = _tcslen(defOutput);
	size_t len_defError = _tcslen(defError);
	size_t len_defPrinter = _tcslen(defPrinter);
	size_t len_defWaiting = _tcslen(defWaiting);


	int nextPos = 0;

	// Input path.
	_tcscpy_s(Buffer, len_defInput + 1, defInput);
	nextPos += len_defInput;

	_tcscpy_s(Buffer + nextPos, len_input + 1, settings.sInput);
	nextPos += len_input;

	_tcscpy_s(Buffer + nextPos, 1 + 1, TEXT("\n"));
	nextPos += 1;

	// Output path.
	_tcscpy_s(Buffer + nextPos, len_defOutput + 1, defOutput);
	nextPos += len_defOutput;

	_tcscpy_s(Buffer + nextPos, len_output + 1, settings.sOutput);
	nextPos += len_output;

	_tcscpy_s(Buffer + nextPos, 1 + 1, TEXT("\n"));
	nextPos += 1;


	// Error path.
	_tcscpy_s(Buffer + nextPos, len_defError + 1, defError);
	nextPos += len_defError;

	_tcscpy_s(Buffer + nextPos, len_error + 1, settings.sError);
	nextPos += len_error;

	_tcscpy_s(Buffer + nextPos, 1 + 1, TEXT("\n"));
	nextPos += 1;

	// Printer.
	_tcscpy_s(Buffer + nextPos, len_defPrinter + 1, defPrinter);
	nextPos += len_defPrinter;

	_tcscpy_s(Buffer + nextPos, len_printer + 1, settings.sPrinter);
	nextPos += len_printer;

	_tcscpy_s(Buffer + nextPos, 1 + 1, TEXT("\n"));
	nextPos += 1;

	// Waiting time.
	_tcscpy_s(Buffer + nextPos, len_defWaiting + 1, defWaiting);
	nextPos += len_defWaiting;
	_tcscpy_s(Buffer + nextPos, 4 + 1, L"1000");
	*/
	return SettingBuffer;
}

Setting ParseSettings()
{

	return Setting();
}

void WriteHeader()
{
	// First need to know the total length of the header itself.

	int totalLen = 0;

	for (int i = 0; i < 4; i++)
	{

	}

}