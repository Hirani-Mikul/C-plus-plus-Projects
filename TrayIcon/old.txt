#include <Windows.h>
#include <iostream>
#include <shellapi.h>

#define WM_TRAYICON (WM_USER + 1)
#define WM_USER_SHELLICON (WM_USER + 2)

NOTIFYICONDATA nid;

LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
	switch (message)
	{
	case WM_CREATE:
		nid.cbSize = sizeof(NOTIFYICONDATA);
		nid.hWnd = hWnd;
		nid.uID = 1;
		nid.uFlags = NIF_ICON | NIF_MESSAGE | NIF_TIP;

		nid.uCallbackMessage = WM_USER_SHELLICON;
		nid.hIcon = LoadIcon(NULL, IDI_APPLICATION);
		lstrcpy(nid.szTip, TEXT("My Application"));
		//nid.hIcon = LoadIcon(hInst, MAKEINTRESOURCE(IDi_SMALL));
		//LoadString(hInst, IDS_APP_TITLE, nid.szTip, MAX_LOGICALDPIOVERRIDE);

		Shell_NotifyIcon(NIM_ADD, &nid);
		ShowWindow(hWnd, SW_HIDE);
		break;

	case WM_TRAYICON:
		if (lParam == WM_LBUTTONDBLCLK)
		{
			ShowWindow(hWnd, SW_SHOW);
			Shell_NotifyIcon(NIM_DELETE, &nid);
			MessageBox(hWnd, TEXT("Application restored!"), TEXT("My Application"), MB_ICONINFORMATION);
		}
		break;
	case WM_DESTROY:
		Shell_NotifyIcon(NIM_DELETE, &nid);
		PostQuitMessage(0);
		break;

	default:
		return DefWindowProc(hWnd, message, wParam, lParam);
	}

	return 0;
}

int WINAPI WinMain(_In_ HINSTANCE hInstance, _In_opt_ HINSTANCE hPrevInstance, _In_ LPSTR lpCmdLine, _In_ int nCmdShow)
{
	WNDCLASSEX wcex = {};
	wcex.cbSize = sizeof(wcex);
	wcex.lpfnWndProc = WndProc;
	wcex.hInstance = hInstance;
	wcex.lpszClassName = TEXT("MyApplication");
	RegisterClassEx(&wcex);

	HWND hWnd = CreateWindowEx(0, TEXT("MyApplication"), TEXT("My Application"), WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, NULL, NULL, hInstance, NULL);

	ShowWindow(hWnd, nCmdShow);

	MSG msg;
	while (GetMessage(&msg, NULL, 0, 0))
	{
		TranslateMessage(&msg);
		DispatchMessage(&msg);
	}

	return (int)msg.wParam;
}