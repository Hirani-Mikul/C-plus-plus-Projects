#include <iostream>
#include <Windows.h>
#include <winspool.h>
#include <vector>
#include <string>
#include <atlstr.h>

#define LOG_ERROR(message, error) \
	SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 4); \
	std::cout << message << " -> " << error << std::endl; \
	SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15) 


#define LOG_SUCCESS(message) \
	SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 10); \
	std::cout << message << std::endl; \
	SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15) 


#define LOG_WARNING(message) \
	SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 14); \
	std::cout << message << std::endl; \
	SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15)



#define LOG_INFO(message) \
	SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 7); \
	std::cout << message << std::endl; \
	SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15) 



bool getAllPrinters(std::vector<LPWSTR>&, std::vector<std::string>&);



int main()
{
	std::vector<LPWSTR> printerList;
	std::vector<std::string> printerListName;

	HANDLE hPrinterHandle = INVALID_HANDLE_VALUE;
	LPWORD bytes_w = 0;
	DOC_INFO_1 doc_info;
	char docName[] = "Test";
	char docType[] = "text";
	char docOut[] = "";


	bool arePrintersAvailable = getAllPrinters(printerList, printerListName);

	if (!arePrintersAvailable)
	{
		LOG_ERROR("Windows Error: ", GetLastError());

		return 0;
	}


	LOG_INFO("Printer List: ");

	int printerNum = 1;
	
	for (auto& p : printerListName)
	{
		std::cout << printerNum << "\t" << p << std::endl;
		printerNum++;
	}

	bool openPrinter = OpenPrinter(
		printerList[2],
		&hPrinterHandle,
		NULL
	);

	if (!openPrinter)
	{
		LOG_ERROR("Error Opening Printer", GetLastError());
		return 0;
	}

	char printText[] = "HELLO THERE, MY NAME IS MIKUL HIRANI!";
	doc_info.pDocName = (LPWSTR)docName;
	doc_info.pDatatype = (LPWSTR)docType;
	doc_info.pOutputFile = (LPWSTR)docOut;

	StartDocPrinter(hPrinterHandle, 1, (LPBYTE)&doc_info);
	StartPagePrinter(hPrinterHandle);
	WritePrinter(hPrinterHandle, printText, std::strlen(printText), (LPDWORD)&bytes_w);
	EndPagePrinter(hPrinterHandle);
	EndDocPrinter(hPrinterHandle);
	ClosePrinter(hPrinterHandle);
}

bool getAllPrinters(std::vector<LPWSTR>& printerList, std::vector<std::string>& printerListName) {
	PRINTER_INFO_5* printer = nullptr;
	DWORD sizeBuffer = 0;
	DWORD entries = 0; // Total number of printers installed in the system

	// Get buffer size

	BOOL enumPrinter_1 = EnumPrinters(
		PRINTER_ENUM_LOCAL | PRINTER_ENUM_CONNECTIONS, // Flag
		NULL, // Name
		5, // Level
		NULL, // pPrinterEnum
		NULL, // cbBuf
		&sizeBuffer, // pcbNeeded
		&entries // pcReturned
	);

	if (!enumPrinter_1)
	{
		LOG_ERROR("Fetching local printer failed: ", GetLastError());

	}

	std::unique_ptr<BYTE[]> ptrBuffer(new BYTE[sizeBuffer]);

	BOOL enumPrinter_2 = EnumPrinters(
		PRINTER_ENUM_LOCAL | PRINTER_ENUM_CONNECTIONS,
		NULL,
		5,
		ptrBuffer.get(),
		sizeBuffer,
		&sizeBuffer,
		&entries
	);

	if (!enumPrinter_2)
	{
		LOG_ERROR("Fetching printers failed: ", GetLastError());

	}
	else LOG_SUCCESS("Successfully fetched the printers.");

	if (!entries) return false;

	else {
		printer = (PRINTER_INFO_5*)ptrBuffer.get();

		printerList.resize(entries);
		printerListName.resize(entries);

		for (UINT i = 0; i < entries; i++)
		{
			std::wstring wspn(printer->pPrinterName);

			printerListName[i] = std::string(wspn.begin(), wspn.end());

			printerList[i] = printer->pPrinterName;
			
			printer++; // Next printer
		}
	}

	return true;

}



/*

			// First convert from LPWSTR to wstring
			std::wstring wstring_pritnerName = std::wstring(printer->pPrinterName);

			// convert wstring to string
			printerList.emplace_back(std::string(wstring_pritnerName.begin(), wstring_pritnerName.end()));

	int printerNum = 1;


				for (auto& p : printerList)
	{
		//std::wstring wstring_pritnerName = std::wstring(p);
		//std::string pname = std::string(wstring_pritnerName.begin(), wstring_pritnerName.end());
		// convert wstring to string

		std::wstring wspn(p);
		std::string pname = std::string(wspn.begin(), wspn.end());

		std::cout << printerNum << "\t" << pname << std::endl;
		printerNum++;
	}
			
			*/